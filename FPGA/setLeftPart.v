// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module setLeftPart (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        slotIndex,
        leftPart_address0,
        leftPart_ce0,
        leftPart_q0,
        auxiliaryList_address0,
        auxiliaryList_ce0,
        auxiliaryList_we0,
        auxiliaryList_d0,
        auxiliaryList_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] slotIndex;
output  [0:0] leftPart_address0;
output   leftPart_ce0;
input  [63:0] leftPart_q0;
output  [13:0] auxiliaryList_address0;
output   auxiliaryList_ce0;
output   auxiliaryList_we0;
output  [63:0] auxiliaryList_d0;
input  [63:0] auxiliaryList_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[0:0] leftPart_address0;
reg leftPart_ce0;
reg[13:0] auxiliaryList_address0;
reg auxiliaryList_ce0;
reg auxiliaryList_we0;
reg[63:0] auxiliaryList_d0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] bitIdx_fu_166_p2;
wire   [5:0] slotBitIdxInWord_fu_172_p1;
reg   [5:0] slotBitIdxInWord_reg_396;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln109_fu_180_p2;
reg   [0:0] icmp_ln109_reg_401;
wire   [2:0] temp_fu_186_p2;
reg   [2:0] temp_reg_405;
wire   [6:0] select_ln122_fu_246_p3;
reg   [6:0] select_ln122_reg_410;
wire   [8:0] zext_ln122_fu_254_p1;
reg   [8:0] zext_ln122_reg_416;
wire   [31:0] zext_ln122_1_fu_258_p1;
reg   [31:0] zext_ln122_1_reg_421;
wire   [0:0] icmp_ln128_fu_262_p2;
reg   [0:0] icmp_ln128_reg_426;
reg   [13:0] auxiliaryList_addr_1_reg_435;
wire   [63:0] add_ln138_fu_341_p2;
reg   [63:0] add_ln138_reg_445;
wire    ap_CS_fsm_state3;
wire   [31:0] bitIdx_2_fu_347_p2;
wire    ap_CS_fsm_state4;
wire   [8:0] extractedBitsNum_fu_359_p2;
wire   [5:0] LPBitInWord_fu_364_p2;
reg   [2:0] temp_0_reg_99;
wire   [0:0] icmp_ln150_fu_380_p2;
reg   [5:0] LPBitInWord_0_reg_110;
reg   [2:0] LPWordIdx_0_reg_122;
reg   [8:0] extractedBitsNum_0_reg_133;
wire   [31:0] ap_phi_mux_slotBitIdxInWord_0_i_phi_fu_148_p4;
reg   [31:0] slotBitIdxInWord_0_i_reg_145;
wire   [63:0] zext_ln135_fu_268_p1;
wire   [63:0] zext_ln137_1_fu_273_p1;
wire   [63:0] zext_ln129_fu_278_p1;
wire   [63:0] zext_ln131_fu_386_p1;
wire    ap_CS_fsm_state5;
reg   [31:0] grp_fu_155_p1;
wire  signed [31:0] bitIdx_fu_166_p0;
wire   [6:0] zext_ln103_1_fu_198_p1;
wire   [6:0] tempB_fu_202_p2;
wire   [8:0] toExtractBitsNum_4_fu_192_p2;
wire   [8:0] zext_ln114_fu_208_p1;
wire   [0:0] icmp_ln115_fu_212_p2;
wire   [8:0] toExtractBitsNum_2_fu_218_p3;
wire   [6:0] zext_ln103_fu_176_p1;
wire   [6:0] toExtractBitsNum_fu_230_p2;
wire   [8:0] zext_ln123_fu_236_p1;
wire   [0:0] icmp_ln122_fu_240_p2;
wire   [6:0] trunc_ln115_fu_226_p1;
wire   [25:0] grp_fu_155_p4;
wire   [63:0] zext_ln134_fu_283_p1;
wire   [63:0] shl_ln134_fu_286_p2;
wire   [63:0] zext_ln135_1_fu_298_p1;
wire   [63:0] lshr_ln135_fu_302_p2;
wire   [63:0] extractPartMask_fu_292_p2;
wire   [63:0] zext_ln137_fu_314_p1;
wire   [63:0] shl_ln137_fu_317_p2;
wire   [63:0] xor_ln137_fu_323_p2;
wire   [63:0] extractPart_1_fu_308_p2;
wire   [63:0] shl_ln138_fu_335_p2;
wire   [63:0] and_ln137_fu_329_p2;
wire   [5:0] trunc_ln145_fu_352_p1;
wire   [5:0] trunc_ln145_1_fu_356_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_380_p2 == 1'd0) & (icmp_ln109_reg_401 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        LPBitInWord_0_reg_110 <= LPBitInWord_fu_364_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        LPBitInWord_0_reg_110 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_380_p2 == 1'd0) & (icmp_ln109_reg_401 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        LPWordIdx_0_reg_122 <= {{extractedBitsNum_fu_359_p2[8:6]}};
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        LPWordIdx_0_reg_122 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_380_p2 == 1'd0) & (icmp_ln109_reg_401 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        extractedBitsNum_0_reg_133 <= extractedBitsNum_fu_359_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        extractedBitsNum_0_reg_133 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_380_p2 == 1'd0) & (icmp_ln109_reg_401 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        slotBitIdxInWord_0_i_reg_145 <= bitIdx_2_fu_347_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        slotBitIdxInWord_0_i_reg_145 <= bitIdx_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln150_fu_380_p2 == 1'd0) & (icmp_ln109_reg_401 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        temp_0_reg_99 <= temp_reg_405;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        temp_0_reg_99 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln138_reg_445 <= add_ln138_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln128_fu_262_p2 == 1'd0) & (icmp_ln109_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        auxiliaryList_addr_1_reg_435 <= zext_ln137_1_fu_273_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln109_reg_401 <= icmp_ln109_fu_180_p2;
        slotBitIdxInWord_reg_396 <= slotBitIdxInWord_fu_172_p1;
        temp_reg_405 <= temp_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln109_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln128_reg_426 <= icmp_ln128_fu_262_p2;
        select_ln122_reg_410 <= select_ln122_fu_246_p3;
        zext_ln122_1_reg_421[6 : 0] <= zext_ln122_1_fu_258_p1[6 : 0];
        zext_ln122_reg_416[6 : 0] <= zext_ln122_fu_254_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & ((icmp_ln150_fu_380_p2 == 1'd1) | (icmp_ln109_reg_401 == 1'd1))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln150_fu_380_p2 == 1'd1) | (icmp_ln109_reg_401 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        auxiliaryList_address0 = zext_ln131_fu_386_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        auxiliaryList_address0 = auxiliaryList_addr_1_reg_435;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        auxiliaryList_address0 = zext_ln137_1_fu_273_p1;
    end else begin
        auxiliaryList_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        auxiliaryList_ce0 = 1'b1;
    end else begin
        auxiliaryList_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        auxiliaryList_d0 = leftPart_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        auxiliaryList_d0 = add_ln138_reg_445;
    end else begin
        auxiliaryList_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((icmp_ln128_reg_426 == 1'd0) & (icmp_ln109_reg_401 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        auxiliaryList_we0 = 1'b1;
    end else begin
        auxiliaryList_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_155_p1 = slotBitIdxInWord_0_i_reg_145;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_155_p1 = ap_phi_mux_slotBitIdxInWord_0_i_phi_fu_148_p4;
    end else begin
        grp_fu_155_p1 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln109_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((icmp_ln128_fu_262_p2 == 1'd1)) begin
            leftPart_address0 = zext_ln129_fu_278_p1;
        end else if ((icmp_ln128_fu_262_p2 == 1'd0)) begin
            leftPart_address0 = zext_ln135_fu_268_p1;
        end else begin
            leftPart_address0 = 'bx;
        end
    end else begin
        leftPart_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln128_fu_262_p2 == 1'd1) & (icmp_ln109_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((icmp_ln128_fu_262_p2 == 1'd0) & (icmp_ln109_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        leftPart_ce0 = 1'b1;
    end else begin
        leftPart_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln128_fu_262_p2 == 1'd1) & (icmp_ln109_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if (((icmp_ln128_fu_262_p2 == 1'd0) & (icmp_ln109_fu_180_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ((icmp_ln150_fu_380_p2 == 1'd1) | (icmp_ln109_reg_401 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign LPBitInWord_fu_364_p2 = (trunc_ln145_fu_352_p1 + trunc_ln145_1_fu_356_p1);

assign add_ln138_fu_341_p2 = (shl_ln138_fu_335_p2 + and_ln137_fu_329_p2);

assign and_ln137_fu_329_p2 = (xor_ln137_fu_323_p2 & auxiliaryList_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_phi_mux_slotBitIdxInWord_0_i_phi_fu_148_p4 = slotBitIdxInWord_0_i_reg_145;

assign bitIdx_2_fu_347_p2 = (zext_ln122_1_reg_421 + slotBitIdxInWord_0_i_reg_145);

assign bitIdx_fu_166_p0 = slotIndex;

assign bitIdx_fu_166_p2 = ($signed(bitIdx_fu_166_p0) * $signed('h4F));

assign extractPartMask_fu_292_p2 = ($signed(shl_ln134_fu_286_p2) + $signed(64'd18446744073709551615));

assign extractPart_1_fu_308_p2 = (lshr_ln135_fu_302_p2 & extractPartMask_fu_292_p2);

assign extractedBitsNum_fu_359_p2 = (zext_ln122_reg_416 + extractedBitsNum_0_reg_133);

assign grp_fu_155_p4 = {{grp_fu_155_p1[31:6]}};

assign icmp_ln109_fu_180_p2 = ((temp_0_reg_99 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln115_fu_212_p2 = ((toExtractBitsNum_4_fu_192_p2 < zext_ln114_fu_208_p1) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_240_p2 = ((toExtractBitsNum_2_fu_218_p3 > zext_ln123_fu_236_p1) ? 1'b1 : 1'b0);

assign icmp_ln128_fu_262_p2 = ((select_ln122_fu_246_p3 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_380_p2 = ((extractedBitsNum_fu_359_p2 > 9'd76) ? 1'b1 : 1'b0);

assign lshr_ln135_fu_302_p2 = leftPart_q0 >> zext_ln135_1_fu_298_p1;

assign select_ln122_fu_246_p3 = ((icmp_ln122_fu_240_p2[0:0] === 1'b1) ? toExtractBitsNum_fu_230_p2 : trunc_ln115_fu_226_p1);

assign shl_ln134_fu_286_p2 = 64'd1 << zext_ln134_fu_283_p1;

assign shl_ln137_fu_317_p2 = extractPartMask_fu_292_p2 << zext_ln137_fu_314_p1;

assign shl_ln138_fu_335_p2 = extractPart_1_fu_308_p2 << zext_ln137_fu_314_p1;

assign slotBitIdxInWord_fu_172_p1 = slotBitIdxInWord_0_i_reg_145[5:0];

assign tempB_fu_202_p2 = ($signed(7'd64) - $signed(zext_ln103_1_fu_198_p1));

assign temp_fu_186_p2 = (3'd1 + temp_0_reg_99);

assign toExtractBitsNum_2_fu_218_p3 = ((icmp_ln115_fu_212_p2[0:0] === 1'b1) ? toExtractBitsNum_4_fu_192_p2 : zext_ln114_fu_208_p1);

assign toExtractBitsNum_4_fu_192_p2 = (9'd77 - extractedBitsNum_0_reg_133);

assign toExtractBitsNum_fu_230_p2 = ($signed(7'd64) - $signed(zext_ln103_fu_176_p1));

assign trunc_ln115_fu_226_p1 = toExtractBitsNum_2_fu_218_p3[6:0];

assign trunc_ln145_1_fu_356_p1 = select_ln122_reg_410[5:0];

assign trunc_ln145_fu_352_p1 = extractedBitsNum_0_reg_133[5:0];

assign xor_ln137_fu_323_p2 = (shl_ln137_fu_317_p2 ^ 64'd18446744073709551615);

assign zext_ln103_1_fu_198_p1 = LPBitInWord_0_reg_110;

assign zext_ln103_fu_176_p1 = slotBitIdxInWord_fu_172_p1;

assign zext_ln114_fu_208_p1 = tempB_fu_202_p2;

assign zext_ln122_1_fu_258_p1 = select_ln122_fu_246_p3;

assign zext_ln122_fu_254_p1 = select_ln122_fu_246_p3;

assign zext_ln123_fu_236_p1 = toExtractBitsNum_fu_230_p2;

assign zext_ln129_fu_278_p1 = LPWordIdx_0_reg_122;

assign zext_ln131_fu_386_p1 = grp_fu_155_p4;

assign zext_ln134_fu_283_p1 = select_ln122_reg_410;

assign zext_ln135_1_fu_298_p1 = LPBitInWord_0_reg_110;

assign zext_ln135_fu_268_p1 = LPWordIdx_0_reg_122;

assign zext_ln137_1_fu_273_p1 = grp_fu_155_p4;

assign zext_ln137_fu_314_p1 = slotBitIdxInWord_reg_396;

always @ (posedge ap_clk) begin
    zext_ln122_reg_416[8:7] <= 2'b00;
    zext_ln122_1_reg_421[31:7] <= 25'b0000000000000000000000000;
end

endmodule //setLeftPart
