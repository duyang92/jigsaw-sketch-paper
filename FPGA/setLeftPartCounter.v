// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module setLeftPartCounter (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        slotIndex,
        counter,
        auxiliaryList_address0,
        auxiliaryList_ce0,
        auxiliaryList_we0,
        auxiliaryList_d0,
        auxiliaryList_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [13:0] slotIndex;
input  [7:0] counter;
output  [13:0] auxiliaryList_address0;
output   auxiliaryList_ce0;
output   auxiliaryList_we0;
output  [63:0] auxiliaryList_d0;
input  [63:0] auxiliaryList_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] auxiliaryList_address0;
reg auxiliaryList_ce0;
reg auxiliaryList_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [19:0] grp_fu_274_p3;
wire   [0:0] icmp_ln164_fu_105_p2;
reg   [0:0] icmp_ln164_reg_292;
wire    ap_CS_fsm_state2;
wire   [1:0] temp_fu_111_p2;
reg   [1:0] temp_reg_296;
wire   [0:0] select_ln168_fu_137_p3;
reg   [0:0] select_ln168_reg_301;
wire   [5:0] trunc_ln169_fu_149_p1;
reg   [5:0] trunc_ln169_reg_306;
reg   [13:0] auxiliaryList_addr_reg_311;
wire   [19:0] bitIdx_1_fu_168_p2;
reg   [19:0] bitIdx_1_reg_316;
wire   [1:0] extractedBitsNum_fu_260_p2;
wire    ap_CS_fsm_state3;
reg   [1:0] extractedBitsNum_0_reg_69;
wire   [0:0] tmp_fu_266_p3;
reg   [19:0] slotBitIdxInWord_0_i_reg_81;
reg   [1:0] toExtractBitsNum_reg_90;
wire   [63:0] zext_ln178_1_fu_163_p1;
wire   [1:0] toExtractBitsNum_1_fu_117_p2;
wire   [0:0] icmp_ln168_fu_123_p2;
wire   [0:0] trunc_ln168_fu_129_p1;
wire   [0:0] trunc_ln168_1_fu_133_p1;
wire   [13:0] slotWordIdx2_fu_153_p4;
wire   [19:0] zext_ln168_1_fu_145_p1;
wire   [1:0] zext_ln168_fu_174_p1;
wire   [1:0] shl_ln175_fu_177_p2;
wire   [0:0] trunc_ln175_fu_183_p1;
wire   [1:0] extractPartMask_fu_187_p2;
wire   [7:0] zext_ln169_fu_203_p1;
wire   [7:0] lshr_ln176_fu_207_p2;
wire   [0:0] trunc_ln176_fu_212_p1;
wire   [0:0] xor_ln175_fu_193_p2;
wire   [0:0] extractPart_fu_216_p2;
wire   [63:0] zext_ln175_fu_199_p1;
wire   [63:0] zext_ln178_fu_226_p1;
wire   [63:0] shl_ln178_fu_229_p2;
wire   [63:0] xor_ln178_fu_235_p2;
wire   [63:0] zext_ln176_fu_222_p1;
wire   [63:0] and_ln178_fu_241_p2;
wire   [63:0] shl_ln179_fu_247_p2;
wire   [13:0] grp_fu_274_p0;
wire   [7:0] grp_fu_274_p1;
wire   [7:0] grp_fu_274_p2;
reg   [2:0] ap_NS_fsm;
wire   [19:0] grp_fu_274_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

insert_mac_muladdcud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 20 ))
insert_mac_muladdcud_U8(
    .din0(grp_fu_274_p0),
    .din1(grp_fu_274_p1),
    .din2(grp_fu_274_p2),
    .dout(grp_fu_274_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_266_p3 == 1'd0) & (icmp_ln164_reg_292 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        extractedBitsNum_0_reg_69 <= extractedBitsNum_fu_260_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        extractedBitsNum_0_reg_69 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_266_p3 == 1'd0) & (icmp_ln164_reg_292 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        slotBitIdxInWord_0_i_reg_81 <= bitIdx_1_reg_316;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        slotBitIdxInWord_0_i_reg_81 <= grp_fu_274_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_266_p3 == 1'd0) & (icmp_ln164_reg_292 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        toExtractBitsNum_reg_90 <= temp_reg_296;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        toExtractBitsNum_reg_90 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln164_fu_105_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        auxiliaryList_addr_reg_311 <= zext_ln178_1_fu_163_p1;
        bitIdx_1_reg_316 <= bitIdx_1_fu_168_p2;
        select_ln168_reg_301 <= select_ln168_fu_137_p3;
        trunc_ln169_reg_306 <= trunc_ln169_fu_149_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        icmp_ln164_reg_292 <= icmp_ln164_fu_105_p2;
        temp_reg_296 <= temp_fu_111_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & ((tmp_fu_266_p3 == 1'd1) | (icmp_ln164_reg_292 == 1'd1))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((tmp_fu_266_p3 == 1'd1) | (icmp_ln164_reg_292 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        auxiliaryList_address0 = auxiliaryList_addr_reg_311;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        auxiliaryList_address0 = zext_ln178_1_fu_163_p1;
    end else begin
        auxiliaryList_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        auxiliaryList_ce0 = 1'b1;
    end else begin
        auxiliaryList_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln164_reg_292 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        auxiliaryList_we0 = 1'b1;
    end else begin
        auxiliaryList_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & ((tmp_fu_266_p3 == 1'd1) | (icmp_ln164_reg_292 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln178_fu_241_p2 = (xor_ln178_fu_235_p2 & auxiliaryList_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign auxiliaryList_d0 = (and_ln178_fu_241_p2 + shl_ln179_fu_247_p2);

assign bitIdx_1_fu_168_p2 = (slotBitIdxInWord_0_i_reg_81 + zext_ln168_1_fu_145_p1);

assign extractPartMask_fu_187_p2 = ($signed(2'd3) + $signed(shl_ln175_fu_177_p2));

assign extractPart_fu_216_p2 = (xor_ln175_fu_193_p2 & trunc_ln176_fu_212_p1);

assign extractedBitsNum_fu_260_p2 = (extractedBitsNum_0_reg_69 + zext_ln168_fu_174_p1);

assign grp_fu_274_p0 = grp_fu_274_p00;

assign grp_fu_274_p00 = slotIndex;

assign grp_fu_274_p1 = 20'd79;

assign grp_fu_274_p2 = 20'd77;

assign icmp_ln164_fu_105_p2 = ((toExtractBitsNum_reg_90 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln168_fu_123_p2 = ((toExtractBitsNum_1_fu_117_p2 > toExtractBitsNum_reg_90) ? 1'b1 : 1'b0);

assign lshr_ln176_fu_207_p2 = counter >> zext_ln169_fu_203_p1;

assign select_ln168_fu_137_p3 = ((icmp_ln168_fu_123_p2[0:0] === 1'b1) ? trunc_ln168_fu_129_p1 : trunc_ln168_1_fu_133_p1);

assign shl_ln175_fu_177_p2 = 2'd1 << zext_ln168_fu_174_p1;

assign shl_ln178_fu_229_p2 = zext_ln175_fu_199_p1 << zext_ln178_fu_226_p1;

assign shl_ln179_fu_247_p2 = zext_ln176_fu_222_p1 << zext_ln178_fu_226_p1;

assign slotWordIdx2_fu_153_p4 = {{slotBitIdxInWord_0_i_reg_81[19:6]}};

assign temp_fu_111_p2 = (toExtractBitsNum_reg_90 + 2'd1);

assign tmp_fu_266_p3 = extractedBitsNum_fu_260_p2[32'd1];

assign toExtractBitsNum_1_fu_117_p2 = ($signed(2'd2) - $signed(extractedBitsNum_0_reg_69));

assign trunc_ln168_1_fu_133_p1 = toExtractBitsNum_1_fu_117_p2[0:0];

assign trunc_ln168_fu_129_p1 = toExtractBitsNum_reg_90[0:0];

assign trunc_ln169_fu_149_p1 = slotBitIdxInWord_0_i_reg_81[5:0];

assign trunc_ln175_fu_183_p1 = shl_ln175_fu_177_p2[0:0];

assign trunc_ln176_fu_212_p1 = lshr_ln176_fu_207_p2[0:0];

assign xor_ln175_fu_193_p2 = (trunc_ln175_fu_183_p1 ^ 1'd1);

assign xor_ln178_fu_235_p2 = (shl_ln178_fu_229_p2 ^ 64'd18446744073709551615);

assign zext_ln168_1_fu_145_p1 = select_ln168_fu_137_p3;

assign zext_ln168_fu_174_p1 = select_ln168_reg_301;

assign zext_ln169_fu_203_p1 = extractedBitsNum_0_reg_69;

assign zext_ln175_fu_199_p1 = extractPartMask_fu_187_p2;

assign zext_ln176_fu_222_p1 = extractPart_fu_216_p2;

assign zext_ln178_1_fu_163_p1 = slotWordIdx2_fu_153_p4;

assign zext_ln178_fu_226_p1 = trunc_ln169_reg_306;

endmodule //setLeftPartCounter
